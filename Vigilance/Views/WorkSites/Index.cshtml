@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section header{
    @Html.Partial("_LeafletHeader")
}
<div id="overlay" class="waitingOverlay">
    <p>Please wait...</p>
</div>
<h2 id="nearestSite">Loading worksites...</h2>
<div id="mapid" style="height: 400px;"></div>
<div id="out" userlat="0" userlng="0"></div>

<div id="logbtns">
    <input type="button" style="display: none" value="Logon" id="logbtn" data-siteid="null" data-sheetid="null" />
</div>

<table id="sites" class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>Name</th>
            <th>Address</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>
@Html.Hidden("selectedWorkSite", "")

@section scripts{
    @Scripts.Render("~/Scripts/leaflet-basics.js");
    <script>
        function setSelectedSite(siteName, siteId) {
            $('#nearestSite').text("Selected: " + siteName);

            $.getJSON("/api/timesheets/" + siteId, function (jsonData) {
                if (jsonData.dateTime == null) {
                    $('#logbtn').prop({
                        'value': 'Logon',
                        'class': 'btn btn-success js-logon'
                    }).attr({
                        'data-siteId': siteId,
                        'data-sheetId': null
                    }).show();
                } else {
                    $('#logbtn').prop({
                        'value': 'Logoff',
                        'class': 'btn btn-warning js-logoff'
                    }).attr({
                        'data-siteId': siteId,
                        'data-sheetId': jsonData.timeSheetId
                    }).show();
                }
            });
        }

        function onMarkerClick(e) {
            setSelectedSite(e.target.title, e.target.id);
        }

        function getWorkSite(sites, siteId) {
            var matchedSite = null;
            $.each(sites, function (index, element) {
                if (element.id == siteId) {
                    matchedSite = element;
                }
            });

            return matchedSite;
        }

        $(document).ready(function () {
            var siteMap = setUpMap();
            geoFindMe(siteMap);

            var selectedSite = null;
            var currentCenter = null;

            var mapLoaded = $.Deferred();
            siteMap.on('load', function (e) {
                currentCenter = e.target.getCenter();
                mapLoaded.resolve();
            });

            var mapLayerGroup = L.layerGroup().addTo(siteMap);

            var workSites = null;

            var tableLoaded = $.getJSON("/api/worksites", { get_param: 'value' }, function (jsonData) {
                workSites = jsonData;
                $('#sites').DataTable({
                    data: jsonData,
                    columns: [
                        {
                            data: "name",
                            render: function (data, type, workSite) {
                                return "<button class='btn-link js-select' data-lat=" + workSite.lat + " data-lng=" + workSite.lng + " data-siteId=" + workSite.id + ">" + data + "</button>";
                            }
                        },
                        {
                            data: "streetAddress"
                        }
                    ]
                });

                $.each(jsonData, function (index, element) {
                    var marker = L.marker([element.lat, element.lng],
                            { title: element.name })
                        .bindPopup("<b>" + element.name + "</b><br>" + element.streetAddress)
                        .on('click', onMarkerClick);
                    marker.id = element.id;
                    mapLayerGroup.addLayer(marker);
                });
            });

            $("#sites").on("click", ".js-select", function () {
                var button = $(this);

                siteMap.setView([button.attr("data-lat"), button.attr("data-lng")], 13);
                setSelectedSite(button.text(), button.attr("data-siteId"));
            });

            $("#logbtns").on("click", ".js-logon", function () {
                $(this).hide();
                $('#overlay').css('width', '100%');
                var site = getWorkSite(workSites, $(this).attr("data-siteId"));
                var logonDto = {
                    workSiteId: site.id,
                    siteName: site.name,
                    siteLat: site.lat,
                    siteLng: site.lng,
                    siteAddress: site.streetAddress,
                    userLat: $('#out').attr('userLat'),
                    userLng: $('#out').attr('userLng')
                }

                $.ajax({
                    url: "/api/timeSheets",
                    method: "post",
                    data: logonDto
                }).done(function () {
                    setTimeout(function () { location.reload(true); }, 2000);
                }).fail(function () {
                    alert("Failed to log on to site. Reload and try again.");
                });
            });

            $("#logbtns").on("click", ".js-logoff", function () {
                $(this).hide();
                $('#overlay').css('width', '100%');
                var logoffDto = {
                    userLat: $('#out').attr('userLat'),
                    userLng: $('#out').attr('userLng')
                };

                $.ajax({
                    url: "/api/timeSheets/" + $(this).attr("data-sheetId"),
                    method: "put",
                    data: logoffDto
                }).done(function () {
                    setTimeout(function () { location.reload(true); }, 2000);
                }).fail(function () {
                    alert("Failed to log off from site. Reload and try again.");
                });
            });

            $.when(mapLoaded, tableLoaded).done(function (e) {
                var shortestDistance = 0;
                var closeSite = null;
                $.each(workSites, function (index, element) {
                    var siteLoc = L.latLng(element.lat, element.lng);
                    var dist = currentCenter.distanceTo(siteLoc);
                    if (shortestDistance == 0) {
                        shortestDistance = dist;
                        closeSite = element;
                    } else {
                        if (dist < shortestDistance) {
                            shortestDistance = dist;
                            closeSite = element;
                        }
                    }
                });

                selectedSite = closeSite;
                siteMap.setView([selectedSite.lat, selectedSite.lng], 13);
                setSelectedSite(selectedSite.name, selectedSite.id);
            });
        });
    </script>
}
